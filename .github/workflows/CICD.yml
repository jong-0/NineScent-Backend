# This workflow uses actions that are not certified by GitHub.
 # They are provided by a third-party and are governed by
 # separate terms of service, privacy policy, and support
 # documentation.
 # This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
 # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
 
 name: Java CI with Gradle
 
 on:
   push:
     branches:
       - 'main'
       - 'develop'
   pull_request:
     branches: [ "main" ]
 
 jobs:
   ci:
     runs-on: ubuntu-latest
     permissions:
       contents: read
 
     steps:
     - uses: actions/checkout@v4
     - name: Set up JDK 17
       uses: actions/setup-java@v4
       with:
         java-version: '17'
         distribution: 'temurin'
 
     # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
     # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
     - name: Setup Gradle
       uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
       
     - name: Set YML
       run: |
         echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./src/main/resources/application.yml
       shell: bash
 
     - name: Build with Gradle Wrapper(Detail Log)
       run: |
         chmod +x gradlew
         ./gradlew clean build --info

     - name: Check jar file
       run: ls ./build/libs

     - name: Naming jar file
       run: mv ./build/libs/mall-0.0.1-SNAPSHOT.jar ./build/libs/app.jar

     - uses: actions/upload-artifact@v4
       with:
         name: app
         path: ./build/libs/app.jar

   cd:
       needs: ci
       runs-on: ubuntu-latest
       steps:
       - name: upload jar
         uses: actions/download-artifact@v4
         with:
           name: app
           path: .

       - name: deploy to EC2
         run: |
           echo "${{ secrets.EC2_SSH_KEY }}" > Seoul.pem
           chmod 600 Seoul.pem

           mkdir -p ~/.ssh
           ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

           scp -i Seoul.pem -o StrictHostKeyChecking=no app.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/app.jar

           ssh -i Seoul.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
           pkill -f app.jar || true
           nohup java -jar /home/ec2-user/app.jar > app.log 2>&1 &
           EOF
